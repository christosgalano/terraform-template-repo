# This workflow validates our Terraform modules, selects our deployment's environment, and then deploys our Terraform code.
name: deploy
run-name: ${{ github.workflow }}
on:
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - terraform/environments/**
  # pull_request:
  #   branches:
  #     - main
  #   paths:
  #     - terraform/environments/**
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        required: true
        description: "Specify the deployment's environment"
      tf_apply:
        type: boolean
        default: true
        required: true
        description: "Specify whether `terraform apply` will be run"

# Cancel in progress workflows based on the following:
# - if the trigger was push/pull_request
# - if the trigger was workflow_dispatch and the environment is the same
#
# Simultaneous deployment is only allowed when its manually triggered and
# targets different environments, otherwise the most recently trigger workflow
# gets executed.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.environment }}
  cancel-in-progress: true

permissions:
  actions: read
  contents: read
  id-token: write
  security-events: write
  pull-requests: write

env:
  TERRAFORM_ENV_DIR: ${{ github.workspace }}/terraform/environments

jobs:
  validate-modules:
    uses: ./.github/workflows/validate_modules.yaml

  select-environment:
    name: select-environment
    needs: validate-modules
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.select-environment.outputs.environment || inputs.environment }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: actions/checkout@v3

      - name: Find which environment/s changed
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            modules:
              - '**/modules/**'
            development:
              - '**/development/**'
            staging:
              - '**/staging/**'
            production:
              - '**/production/**'

      # Deployments to multiple environments simultaneously is not allowed.
      # The deployment priority is as follows:
      # 1. Changes to module      files  ->  deploy to development to test it out
      # 1. Changes to production  files  ->  deploy to production
      # 2. Changes to staging     files  ->  deploy to staging
      # 3. Changes to development files  ->  deploy to development
      - name: Select deployment environment
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        id: select-environment
        run: |
          environment=""
          if [ "${{ steps.filter.outputs.modules }}" == "true" ]; then
            environment="development"
          elif [ "${{ steps.filter.outputs.production }}" == "true" ]; then
            environment="production"
          elif [ "${{ steps.filter.outputs.staging }}" == "true" ]; then
            environment="staging"
          elif [ "${{ steps.filter.outputs.development }}" == "true" ]; then
            environment="development"
          else
            echo "Error finding changes to terraform files"
            exit 1
          fi
          echo "Selected the $environment environment" 
          echo "environment=$environment" >> $GITHUB_OUTPUT

  deploy:
    name: deploy
    needs: select-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.select-environment.outputs.environment }}
    env:
      ENVIRONMENT: ${{ needs.select-environment.outputs.environment }}
      REPORTS_DIR: ${{ github.workspace }}/terraform/environments/${{ needs.select-environment.outputs.environment }}/reports
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TERRAFORM_ENV_DIR }}/${{ env.ENVIRONMENT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Make 'reports' directory
        run: mkdir -p reports

      - name: Run tfsec
        uses: aquasecurity/tfsec-sarif-action@v0.1.4
        with:
          working_directory: ${{ env.TERRAFORM_ENV_DIR }}/${{ env.ENVIRONMENT }}
          sarif_file: ${{ env.REPORTS_DIR }}/${{ env.ENVIRONMENT }}_tfsec.sarif
          tfvars_file: ${{ env.TERRAFORM_ENV_DIR }}/${{ env.ENVIRONMENT }}/${{ env.ENVIRONMENT }}.auto.tfvars
          tfsec_args: "--soft-fail"

      # TODO: uncomment when repo is public
      # - name: Upload SARIF file
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: ${{ env.TERRAFORM_ENV_DIR }}/${{ env.ENVIRONMENT }}_tfsec.sarif # path to SARIF file relative to the root of the repository
      #     category: tfsec

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform init
        id: init
        run: terraform init
        continue-on-error: true

      - name: Terraform validate
        id: validate
        run: terraform validate -no-color
        continue-on-error: true

      - name: Terraform plan
        # if: github.event_name == 'pull_request'
        id: plan
        run: |
          terraform plan -out=${{ env.ENVIRONMENT }}.json \
            -var="client_id=${{ secrets.CLIENT_ID }}" \
            -var="tenant_id=${{ secrets.TENANT_ID }}" \
            -var="subscription_id=${{ secrets.SUBSCRIPTION_ID }}"
        continue-on-error: true

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@ff33f691d8d0c60287bbd408d84b9a7cbb6c27d1 # v12.2121.0
        with:
          file: ${{ env.ENVIRONMENT }}.json
          quiet: true
          soft_fail: false
          framework: terraform
          output_format: sarif
          output_file_path: ${{ env.REPORTS_DIR }}/${{ env.ENVIRONMENT }}_checkov
          download_external_modules: true
        continue-on-error: true

      - name: Update pull request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tf_result = ${{ steps.tfsec.tfsec-return-code }} ? 'failure' : 'success'
            const output = `#### Tfsec Scan Result  „äôÔ∏è `${tf_result}`
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.TERRAFORM_ENV_DIR }}/${{ env.ENVIRONMENT }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Upload reports as artifact
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: ${{ env.ENVIRONMENT }}_scan_results
          path: ${{ env.REPORTS_DIR }}
          retention-days: 5

      - name: Check tfsec status
        if: steps.tfsec.tfsec-return-code
        run: exit 1

      - name: Check terraform status
        if: steps.fmt.outcome == 'failure' || steps.init.outcome == 'failure' || steps.validate.outcome == 'failure'
        run: exit 1

      - name: Check checkov status
        if: steps.checkov.conclusion == 'failure'
        run: exit 1

      - name: Terraform apply
        # if: github.event_name == 'workflow_dispatch' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
        if: inputs.tf_apply || (github.ref == 'refs/heads/main' && github.event_name == 'push')
        id: apply
        run: |
          terraform apply -no-color -auto-approve \
            -var="client_id=${{ secrets.CLIENT_ID }}" \
            -var="tenant_id=${{ secrets.TENANT_ID }}" \
            -var="subscription_id=${{ secrets.SUBSCRIPTION_ID }}"
