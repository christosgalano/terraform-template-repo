# This workflow validates and then deploys our Terraform code.
name: deploy
run-name: ${{ github.workflow }}
on:
  workflow_dispatch:
  # push:
  #   branches:
  #   - main
  #   paths:
  #   - terraform/**
  # pull_request:
  #   branches:
  #   - main
  #   paths:
  #   - terraform/**

permissions:
  actions: read
  contents: read
  id-token: write
  security-events: write
  pull-requests: write

env:
  WORKING_DIR: ${{ github.workspace }}/terraform # working directory where the Terraform files are located

jobs:
  deploy:
    name: deploy
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # - name: Run tfsec
      #   uses: aquasecurity/tfsec-sarif-action@v0.1.4
      #   with:
      #     working_directory: ${{ env.WORKING_DIR }}
      #     sarif_file: tfsec.sarif

      # - name: Upload SARIF file
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: ${{ env.WORKING_DIR }}/tfsec.sarif # path to SARIF file relative to the root of the repository
      #     category: tfsec

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check

      - name: Terraform init
        run: terraform init

      - name: Terraform validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform plan
        # if: github.event_name == 'pull_request'
        id: plan
        env:
          TF_LOG: TRACE
        run: |
          terraform plan \
            -var="client_id=${{ secrets.CLIENT_ID }}" \
            -var="tenant_id=${{ secrets.TENANT_ID }}" \
            -var="subscription_id=${{ secrets.SUBSCRIPTION_ID }}"
        # continue-on-error: true

      - name: Update pull request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform apply
        # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: apply
        run: |
          terraform apply -no-color -auto-approve \
            -var="client_id=${{ secrets.CLIENT_ID }}" \
            -var="tenant_id=${{ secrets.TENANT_ID }}" \
            -var="subscription_id=${{ secrets.SUBSCRIPTION_ID }}"
