# This workflow validates changes made to one or modules.
name: validate-modules
run-name: ${{ github.workflow }}
on:
  push:
    branches:
      - main
    paths:
      - terraform/modules/**
  pull_request:
    branches:
      - main
    paths:
      - terraform/modules/**
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

permissions:
  actions: read
  contents: read
  id-token: write
  pull-requests: write

env:
  TERRAFORM_REL_MOD_DIR: terraform/modules
  TERRAFORM_ABS_MOD_DIR: ${{ github.workspace }}/terraform/modules

jobs:
  select-modules:
    name: select-modules
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.select-all-modules.outputs.modules }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Select all modules
        id: select-all-modules
        working-directory: ${{ env.TERRAFORM_ABS_MOD_DIR }}
        run: |
          modules=( $(ls ./) )
          modules_json=$(jq -c -n '$ARGS.positional' --args "${modules[@]}")
          echo "Selected modules: $modules_json"
          echo "modules=$modules_json" >> $GITHUB_OUTPUT

  validate-module:
    name: validate-${{ matrix.module }}-module
    needs: select-modules
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5 # validate up to 5 modules in parallel
      fail-fast: false # do not cancel any queued or running job if one job fails
      matrix:
        module: ${{ fromJson(needs.select-modules.outputs.modules) }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        id: tfsec
        with:
          working_directory: ${{ env.TERRAFORM_ABS_MOD_DIR }}/${{ matrix.module }}
          soft_fail: false
          additional_args: "--concise-output"
          github_token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Terraform fmt
        working-directory: ${{ env.TERRAFORM_ABS_MOD_DIR }}/${{ matrix.module }}
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform init
        working-directory: ${{ env.TERRAFORM_ABS_MOD_DIR }}/${{ matrix.module }}/validate
        id: init
        run: terraform init
        continue-on-error: true

      - name: Terraform validate
        working-directory: ${{ env.TERRAFORM_ABS_MOD_DIR }}/${{ matrix.module }}/validate
        id: validate
        run: terraform validate -no-color
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `## ${{ matrix.module }} module
            #### Tfsec Scan Result „äôÔ∏è\`${{ steps.tfsec.outcome }}\`
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`hcl
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            *Actor: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.TERRAFORM_REL_MOD_DIR }}/${{ matrix.module }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Check tfsec status
        if: steps.tfsec.outcome == 'failure'
        run: exit 1

      - name: Check terraform status
        if: steps.fmt.outcome == 'failure' || steps.init.outcome == 'failure' || steps.validate.outcome == 'failure'
        run: exit 1
